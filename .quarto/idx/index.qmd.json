{"title":"LLM Portal","markdown":{"yaml":{"title":"LLM Portal","subtitle":"Text Processing with Large Language Models","format":{"html":{"theme":"cosmo","toc":true,"toc-location":"left","code-fold":true,"embed-resources":false}},"filters":["shinylive"]},"headingText":"Welcome to LLM Portal","containsRefs":false,"markdown":"\n\n\nThis portal provides easy access to powerful text processing capabilities using Large Language Models through OpenRouter's API.\n\n## Available Tools\n\n### üìù Text Summarization\nAutomatically generate concise summaries of your text documents.\n- Upload CSV files with text data\n- Choose from multiple LLM models\n- Configure summary length and style\n- Download processed results\n\n[Go to Text Summarizer ‚Üí](summarize.html)\n\n### üè∑Ô∏è Text Classification\nClassify text documents into predefined categories.\n- **One-shot Classification**: Define categories with descriptions\n- **Few-shot Classification**: Train with example documents\n- Support for multiple model types\n- Batch processing capabilities\n\n[Go to Text Classifier ‚Üí](classify.html)\n\n### üìä Data Visualization\nExplore and visualize your text processing results.\n- Interactive charts and graphs\n- Summary statistics\n- Export capabilities\n\n[Go to Data Viewer ‚Üí](visualize.html)\n\n## Quick Start Demo\n\nHere's a simple interactive example of what our tools can do:\n\n```{python}\n#| echo: true\n#| code-fold: false\n\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data representing text processing results\nnp.random.seed(42)\nmodels = ['Claude Sonnet 4', 'Mistral Large', 'GPT-4', 'Devstral Small']\naccuracy_scores = [0.92, 0.88, 0.90, 0.85]\nprocessing_times = [2.3, 1.8, 2.1, 1.2]\n\n# Create a simple comparison chart\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 5))\n\n# Accuracy comparison\nax1.bar(models, accuracy_scores, color=['#2E86AB', '#A23B72', '#F18F01', '#C73E1D'])\nax1.set_title('Model Accuracy Comparison')\nax1.set_ylabel('Accuracy Score')\nax1.set_ylim(0, 1)\nax1.tick_params(axis='x', rotation=45)\n\n# Processing time comparison\nax2.bar(models, processing_times, color=['#2E86AB', '#A23B72', '#F18F01', '#C73E1D'])\nax2.set_title('Processing Time Comparison')\nax2.set_ylabel('Time (seconds)')\nax2.tick_params(axis='x', rotation=45)\n\nplt.tight_layout()\nplt.show()\n\n# Display summary statistics\nsummary_df = pd.DataFrame({\n    'Model': models,\n    'Accuracy': accuracy_scores,\n    'Speed (s)': processing_times,\n    'Score': [acc/time for acc, time in zip(accuracy_scores, processing_times)]\n})\n\nprint(\"Model Performance Summary:\")\nprint(summary_df.round(3))\n```\n\n## How It Works\n\n```{python}\n#| echo: true\n#| code-fold: true\n\n# Example of how our API processes text\ndef simulate_text_processing():\n    \"\"\"Simulate the text processing workflow\"\"\"\n    \n    # Sample input text\n    sample_texts = [\n        \"Climate change is a pressing global issue that requires immediate action.\",\n        \"Machine learning algorithms are revolutionizing data analysis.\",\n        \"The economic impact of automation continues to reshape industries.\"\n    ]\n    \n    # Simulate processing results\n    results = []\n    for i, text in enumerate(sample_texts):\n        results.append({\n            'id': f'text_{i+1}',\n            'original_length': len(text),\n            'summary_length': len(text) // 3,\n            'processing_time': np.random.uniform(0.5, 2.0),\n            'confidence': np.random.uniform(0.85, 0.98)\n        })\n    \n    return pd.DataFrame(results)\n\n# Show processing simulation\nprocessing_results = simulate_text_processing()\nprint(\"Sample Processing Results:\")\nprint(processing_results.round(3))\n\n# Create a simple visualization\nplt.figure(figsize=(10, 6))\nplt.scatter(processing_results['original_length'], \n           processing_results['summary_length'],\n           s=processing_results['confidence']*100,\n           alpha=0.7,\n           c=processing_results['processing_time'],\n           cmap='viridis')\n\nplt.xlabel('Original Text Length (characters)')\nplt.ylabel('Summary Length (characters)')\nplt.title('Text Summarization Performance')\nplt.colorbar(label='Processing Time (s)')\nplt.grid(True, alpha=0.3)\nplt.show()\n```\n\n## Getting Started\n\n1. **Choose Your Task**: Select from text summarization or classification\n2. **Upload Your Data**: Provide CSV files with your text data\n3. **Configure Settings**: Choose models, parameters, and output preferences\n4. **Process & Download**: Run the analysis and download your results\n\n## System Features\n\n- **Multiple LLM Models**: Access to state-of-the-art language models\n- **Batch Processing**: Handle large datasets efficiently\n- **Session Management**: Secure, isolated processing sessions\n- **Real-time Status**: Monitor job progress in real-time\n- **Export Options**: Download results in various formats\n\n## Support\n\nFor questions, documentation, or technical support, please refer to our [documentation pages](docs.html) or contact the development team.\n\n---\n\n*Powered by OpenRouter API ‚Ä¢ Built with Quarto & Python*","srcMarkdownNoYaml":"\n\n# Welcome to LLM Portal\n\nThis portal provides easy access to powerful text processing capabilities using Large Language Models through OpenRouter's API.\n\n## Available Tools\n\n### üìù Text Summarization\nAutomatically generate concise summaries of your text documents.\n- Upload CSV files with text data\n- Choose from multiple LLM models\n- Configure summary length and style\n- Download processed results\n\n[Go to Text Summarizer ‚Üí](summarize.html)\n\n### üè∑Ô∏è Text Classification\nClassify text documents into predefined categories.\n- **One-shot Classification**: Define categories with descriptions\n- **Few-shot Classification**: Train with example documents\n- Support for multiple model types\n- Batch processing capabilities\n\n[Go to Text Classifier ‚Üí](classify.html)\n\n### üìä Data Visualization\nExplore and visualize your text processing results.\n- Interactive charts and graphs\n- Summary statistics\n- Export capabilities\n\n[Go to Data Viewer ‚Üí](visualize.html)\n\n## Quick Start Demo\n\nHere's a simple interactive example of what our tools can do:\n\n```{python}\n#| echo: true\n#| code-fold: false\n\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data representing text processing results\nnp.random.seed(42)\nmodels = ['Claude Sonnet 4', 'Mistral Large', 'GPT-4', 'Devstral Small']\naccuracy_scores = [0.92, 0.88, 0.90, 0.85]\nprocessing_times = [2.3, 1.8, 2.1, 1.2]\n\n# Create a simple comparison chart\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 5))\n\n# Accuracy comparison\nax1.bar(models, accuracy_scores, color=['#2E86AB', '#A23B72', '#F18F01', '#C73E1D'])\nax1.set_title('Model Accuracy Comparison')\nax1.set_ylabel('Accuracy Score')\nax1.set_ylim(0, 1)\nax1.tick_params(axis='x', rotation=45)\n\n# Processing time comparison\nax2.bar(models, processing_times, color=['#2E86AB', '#A23B72', '#F18F01', '#C73E1D'])\nax2.set_title('Processing Time Comparison')\nax2.set_ylabel('Time (seconds)')\nax2.tick_params(axis='x', rotation=45)\n\nplt.tight_layout()\nplt.show()\n\n# Display summary statistics\nsummary_df = pd.DataFrame({\n    'Model': models,\n    'Accuracy': accuracy_scores,\n    'Speed (s)': processing_times,\n    'Score': [acc/time for acc, time in zip(accuracy_scores, processing_times)]\n})\n\nprint(\"Model Performance Summary:\")\nprint(summary_df.round(3))\n```\n\n## How It Works\n\n```{python}\n#| echo: true\n#| code-fold: true\n\n# Example of how our API processes text\ndef simulate_text_processing():\n    \"\"\"Simulate the text processing workflow\"\"\"\n    \n    # Sample input text\n    sample_texts = [\n        \"Climate change is a pressing global issue that requires immediate action.\",\n        \"Machine learning algorithms are revolutionizing data analysis.\",\n        \"The economic impact of automation continues to reshape industries.\"\n    ]\n    \n    # Simulate processing results\n    results = []\n    for i, text in enumerate(sample_texts):\n        results.append({\n            'id': f'text_{i+1}',\n            'original_length': len(text),\n            'summary_length': len(text) // 3,\n            'processing_time': np.random.uniform(0.5, 2.0),\n            'confidence': np.random.uniform(0.85, 0.98)\n        })\n    \n    return pd.DataFrame(results)\n\n# Show processing simulation\nprocessing_results = simulate_text_processing()\nprint(\"Sample Processing Results:\")\nprint(processing_results.round(3))\n\n# Create a simple visualization\nplt.figure(figsize=(10, 6))\nplt.scatter(processing_results['original_length'], \n           processing_results['summary_length'],\n           s=processing_results['confidence']*100,\n           alpha=0.7,\n           c=processing_results['processing_time'],\n           cmap='viridis')\n\nplt.xlabel('Original Text Length (characters)')\nplt.ylabel('Summary Length (characters)')\nplt.title('Text Summarization Performance')\nplt.colorbar(label='Processing Time (s)')\nplt.grid(True, alpha=0.3)\nplt.show()\n```\n\n## Getting Started\n\n1. **Choose Your Task**: Select from text summarization or classification\n2. **Upload Your Data**: Provide CSV files with your text data\n3. **Configure Settings**: Choose models, parameters, and output preferences\n4. **Process & Download**: Run the analysis and download your results\n\n## System Features\n\n- **Multiple LLM Models**: Access to state-of-the-art language models\n- **Batch Processing**: Handle large datasets efficiently\n- **Session Management**: Secure, isolated processing sessions\n- **Real-time Status**: Monitor job progress in real-time\n- **Export Options**: Download results in various formats\n\n## Support\n\nFor questions, documentation, or technical support, please refer to our [documentation pages](docs.html) or contact the development team.\n\n---\n\n*Powered by OpenRouter API ‚Ä¢ Built with Quarto & Python*"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"jupyter"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":true,"code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["styles.css"],"toc":true,"filters":["shinylive"],"embed-resources":false,"output-file":"index.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.6.40","extensions":["shinylive"],"theme":["cosmo","brand"],"title":"LLM Portal","subtitle":"Text Processing with Large Language Models","toc-location":"left"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}