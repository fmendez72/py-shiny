{
  "hash": "4410b1d957d78cb50df69c6cd2f1603c",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"LLM Portal\"\nsubtitle: \"Text Processing with Large Language Models\"\nformat: \n  html:\n    theme: cosmo\n    toc: true\n    toc-location: left\n    code-fold: true\n    embed-resources: false\nfilters:\n  - shinylive\n---\n\n\n\n\n# Welcome to LLM Portal\n\nThis portal provides easy access to powerful text processing capabilities using Large Language Models through OpenRouter's API.\n\n## Available Tools\n\n### üìù Text Summarization\nAutomatically generate concise summaries of your text documents.\n- Upload CSV files with text data\n- Choose from multiple LLM models\n- Configure summary length and style\n- Download processed results\n\n[Go to Text Summarizer ‚Üí](summarize.html)\n\n### üè∑Ô∏è Text Classification\nClassify text documents into predefined categories.\n- **One-shot Classification**: Define categories with descriptions\n- **Few-shot Classification**: Train with example documents\n- Support for multiple model types\n- Batch processing capabilities\n\n[Go to Text Classifier ‚Üí](classify.html)\n\n### üìä Data Visualization\nExplore and visualize your text processing results.\n- Interactive charts and graphs\n- Summary statistics\n- Export capabilities\n\n[Go to Data Viewer ‚Üí](visualize.html)\n\n## Quick Start Demo\n\nHere's a simple interactive example of what our tools can do:\n\n::: {#343fc890 .cell execution_count=1}\n``` {.python .cell-code code-fold=\"false\"}\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data representing text processing results\nnp.random.seed(42)\nmodels = ['Claude Sonnet 4', 'Mistral Large', 'GPT-4', 'Devstral Small']\naccuracy_scores = [0.92, 0.88, 0.90, 0.85]\nprocessing_times = [2.3, 1.8, 2.1, 1.2]\n\n# Create a simple comparison chart\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 5))\n\n# Accuracy comparison\nax1.bar(models, accuracy_scores, color=['#2E86AB', '#A23B72', '#F18F01', '#C73E1D'])\nax1.set_title('Model Accuracy Comparison')\nax1.set_ylabel('Accuracy Score')\nax1.set_ylim(0, 1)\nax1.tick_params(axis='x', rotation=45)\n\n# Processing time comparison\nax2.bar(models, processing_times, color=['#2E86AB', '#A23B72', '#F18F01', '#C73E1D'])\nax2.set_title('Processing Time Comparison')\nax2.set_ylabel('Time (seconds)')\nax2.tick_params(axis='x', rotation=45)\n\nplt.tight_layout()\nplt.show()\n\n# Display summary statistics\nsummary_df = pd.DataFrame({\n    'Model': models,\n    'Accuracy': accuracy_scores,\n    'Speed (s)': processing_times,\n    'Score': [acc/time for acc, time in zip(accuracy_scores, processing_times)]\n})\n\nprint(\"Model Performance Summary:\")\nprint(summary_df.round(3))\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-2-output-1.png){}\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nModel Performance Summary:\n             Model  Accuracy  Speed (s)  Score\n0  Claude Sonnet 4      0.92        2.3  0.400\n1    Mistral Large      0.88        1.8  0.489\n2            GPT-4      0.90        2.1  0.429\n3   Devstral Small      0.85        1.2  0.708\n```\n:::\n:::\n\n\n## How It Works\n\n::: {#cc69bcbf .cell execution_count=2}\n``` {.python .cell-code code-fold=\"true\"}\n# Example of how our API processes text\ndef simulate_text_processing():\n    \"\"\"Simulate the text processing workflow\"\"\"\n    \n    # Sample input text\n    sample_texts = [\n        \"Climate change is a pressing global issue that requires immediate action.\",\n        \"Machine learning algorithms are revolutionizing data analysis.\",\n        \"The economic impact of automation continues to reshape industries.\"\n    ]\n    \n    # Simulate processing results\n    results = []\n    for i, text in enumerate(sample_texts):\n        results.append({\n            'id': f'text_{i+1}',\n            'original_length': len(text),\n            'summary_length': len(text) // 3,\n            'processing_time': np.random.uniform(0.5, 2.0),\n            'confidence': np.random.uniform(0.85, 0.98)\n        })\n    \n    return pd.DataFrame(results)\n\n# Show processing simulation\nprocessing_results = simulate_text_processing()\nprint(\"Sample Processing Results:\")\nprint(processing_results.round(3))\n\n# Create a simple visualization\nplt.figure(figsize=(10, 6))\nplt.scatter(processing_results['original_length'], \n           processing_results['summary_length'],\n           s=processing_results['confidence']*100,\n           alpha=0.7,\n           c=processing_results['processing_time'],\n           cmap='viridis')\n\nplt.xlabel('Original Text Length (characters)')\nplt.ylabel('Summary Length (characters)')\nplt.title('Text Summarization Performance')\nplt.colorbar(label='Processing Time (s)')\nplt.grid(True, alpha=0.3)\nplt.show()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nSample Processing Results:\n       id  original_length  summary_length  processing_time  confidence\n0  text_1               73              24            1.062       0.974\n1  text_2               62              20            1.598       0.928\n2  text_3               66              22            0.734       0.870\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-3-output-2.png){}\n:::\n:::\n\n\n## Getting Started\n\n1. **Choose Your Task**: Select from text summarization or classification\n2. **Upload Your Data**: Provide CSV files with your text data\n3. **Configure Settings**: Choose models, parameters, and output preferences\n4. **Process & Download**: Run the analysis and download your results\n\n## System Features\n\n- **Multiple LLM Models**: Access to state-of-the-art language models\n- **Batch Processing**: Handle large datasets efficiently\n- **Session Management**: Secure, isolated processing sessions\n- **Real-time Status**: Monitor job progress in real-time\n- **Export Options**: Download results in various formats\n\n## Support\n\nFor questions, documentation, or technical support, please refer to our [documentation pages](docs.html) or contact the development team.\n\n---\n\n*Powered by OpenRouter API ‚Ä¢ Built with Quarto & Python*\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {}
  }
}